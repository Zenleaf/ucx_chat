- settings = @notification.settings
- import UcxChat.NotificationSetting, only: [options: 1, option_text: 2]
.content.notifications
  .list-view.push-notifications
    .title
      %h2= ~g"Notifications"
    %form
      %ul.list.clearfix
        %li
          %label= ~g"Audio"
          %div
            - if @editing == "audio" do
              %label
                %select.audio(name="notification[settings][audio]")
                  - for {id, text} <- options(:audio) do
                    = option_tag(settings, :audio, id, text)
              %button.button.cancel(type="button")= ~g"Cancel"
              %button.button.primary.save(type="button")= ~g"Save"
            - else
              %span.current-setting= option_text options(:audio), settings.audio
                %i.icon-play-circled(data-play="audio")
                %i.icon-pencil(data-edit="audio")
        %li
          %label= ~g"Desktop"
          %div
            - if @editing == "desktop" do
              - for {id, text} <- options(:desktop) do
                = radio_tag(settings, :desktop, id, text, name: "notification[settings][desktop]")
              %br
              - if settings.duration do
                %label= ~g"Duration" <> " (" <> ~g"seconds" <> ")"
                  %input.content-background-color(type="number" name="notification[settings][duration]" min="0" value="#{settings.duration}")
              - else
                %label= ~g"Duration" <> " (" <> ~g"seconds" <> ")"
                  - placeholder = ~g(Use User Preferences or Global Settings)
                  %input.content-background-color(type="number" name="notification[settings][duration]" min="0" value="" placeholder="#{placeholder}")

              %button.button.cancel(type="button")= ~g"Cancel"
              %button.button.primary.save(type="button")= ~g"Save"
            - else
              %span.current-setting= option_text options(:desktop), settings.desktop
                %i.icon-pencil(data-edit="desktop")
        - unless @editing == "desktop" do
          %li
            %label= ~g"Desktop Notifications Duration"
            %div
              %span.current-setting
                - if settings.duration do
                  = "#{settings.duration} " <> ~g"seconds"
                - else
                  = ~g"Use User Preferences or Global Settings"
        %li
          %label= ~g"Mobile (unsupported)"
          %div
            - if @editing == "mobile" do
              - for {id, text} <- options(:mobile) do
                = radio_tag(settings, :mobile, id, text, name: "notification[settings][mobile]")
              %button.button.cancel(type="button")= ~g"Cancel"
              %button.button.primary.save(type="button")= ~g"Save"
            - else
              %span.current-setting= option_text options(:mobile), settings.mobile
                %i.icon-pencil(data-edit="mobile")
        %li
          %label= ~g"Email (unsupported)"
          %div
            - if @editing == "email" do
              - for {id, text} <- options(:email) do
                = radio_tag(settings, :email, id, text, name: "notification[settings][email]")
              %button.button.cancel(type="button")= ~g"Cancel"
              %button.button.primary.save(type="button")= ~g"Save"
            - else
              %span.current-setting= option_text options(:email), settings.email
                %i.icon-pencil(data-edit="email")

        -# if :email_no_verified do
        %li
          .alert.alert-warning.pending-background.pending-border
            = ~g"You wont receive email notifications because you have not verified your email"

        %li
          %label= ~g"Unread Alert (unsupported)"
          %div
            - if @editing == "unread_alert" do
              - for {id, text} <- options(:unread_alert) do
                = radio_tag(settings, :unread_alert, id, text, name: "notification[settings][unread_alert]")
              %button.button.cancel(type="button")= ~g"Cancel"
              %button.button.primary.save(type="button")= ~g"Save"
            - else
              %span.current-setting= option_text options(:unread_alert), settings.unread_alert
                %i.icon-pencil(data-edit="unread_alert")
